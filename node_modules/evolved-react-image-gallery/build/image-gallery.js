'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactSwipeable = require('react-swipeable');

var _reactSwipeable2 = _interopRequireDefault(_reactSwipeable);

var ImageGallery = _react2['default'].createClass({

  displayName: 'ImageGallery',

  propTypes: {
    items: _react2['default'].PropTypes.array.isRequired,
    gallerymenu: _react2['default'].PropTypes.array,
    showThumbnails: _react2['default'].PropTypes.bool,
    showBullets: _react2['default'].PropTypes.bool,
    showFileMeta: _react2['default'].PropTypes.bool,
    showCloseButton: _react2['default'].PropTypes.bool,
    showNav: _react2['default'].PropTypes.bool,
    showIndex: _react2['default'].PropTypes.bool,
    indexSeparator: _react2['default'].PropTypes.string,
    autoPlay: _react2['default'].PropTypes.bool,
    lazyLoad: _react2['default'].PropTypes.bool,
    slideInterval: _react2['default'].PropTypes.number,
    onSlide: _react2['default'].PropTypes.func,
    onClick: _react2['default'].PropTypes.func,
    startIndex: _react2['default'].PropTypes.number,
    defaultImage: _react2['default'].PropTypes.string,
    disableThumbnailScroll: _react2['default'].PropTypes.bool,
    slideOnThumbnailHover: _react2['default'].PropTypes.bool,
    server: _react2['default'].PropTypes.bool,
    onCloseClick: _react2['default'].PropTypes.func,
    useKeyboardNavigation: _react2['default'].PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      lazyLoad: true,
      showThumbnails: true,
      showNav: true,
      showCloseButton: false,
      showBullets: false,
      showFileMeta: false,
      showIndex: false,
      indexSeparator: ' / ',
      autoPlay: false,
      disableThumbnailScroll: false,
      server: false,
      slideOnThumbnailHover: false,
      slideInterval: 4000,
      startIndex: 0,
      useKeyboardNavigation: true
    };
  },

  getInitialState: function getInitialState() {
    return {
      currentIndex: this.props.startIndex,
      thumbnailsTranslateX: 0,
      containerWidth: 0
    };
  },

  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    if (prevState.containerWidth !== this.state.containerWidth || prevProps.showThumbnails !== this.props.showThumbnails) {

      // adjust thumbnail container when window width is adjusted
      // when the container resizes, thumbnailsTranslateX
      // should always be negative (moving right),
      // if container fits all thumbnails its set to 0

      this._setThumbnailsTranslateX(-this._getScrollX(this.state.currentIndex > 0 ? 1 : 0) * this.state.currentIndex);
    }

    if (prevState.currentIndex !== this.state.currentIndex) {

      // call back function if provided
      if (this.props.onSlide) {
        this.props.onSlide(this.state.currentIndex);
      }

      // calculates thumbnail container position
      if (this.state.currentIndex === 0) {
        this._setThumbnailsTranslateX(0);
      } else {
        var indexDifference = Math.abs(prevState.currentIndex - this.state.currentIndex);
        var _scrollX = this._getScrollX(indexDifference);
        if (_scrollX > 0) {
          if (prevState.currentIndex < this.state.currentIndex) {
            this._setThumbnailsTranslateX(this.state.thumbnailsTranslateX - _scrollX);
          } else if (prevState.currentIndex > this.state.currentIndex) {
            this._setThumbnailsTranslateX(this.state.thumbnailsTranslateX + _scrollX);
          }
        }
      }
    }
  },

  componentWillMount: function componentWillMount() {
    this._thumbnailDelay = 300;
    this._ghotClickDelay = 600;
    this._preventGhostClick = false;
  },

  componentDidMount: function componentDidMount() {
    var _this = this;

    this._handleResize();
    if (this.props.autoPlay) {
      this.play();
    }
    window.addEventListener('resize', this._handleResize);

    var fn = window.onkeydown;
    window.onkeydown = function (e) {
      // handle event
      _this._handleKeyDown(e);
    };
    this.origFn = fn;

    this.refs.gallerycontent.focus();
  },

  componentWillUnmount: function componentWillUnmount() {
    window.removeEventListener('resize', this._handleResize);
    if (this._intervalId) {
      window.clearInterval(this._intervalId);
      this._intervalId = null;
    }

    window.onkeydown = this.origFn;
  },

  slideToIndex: function slideToIndex(index, event) {
    var slideCount = this.props.items.length - 1;

    if (index < 0) {
      this.setState({ currentIndex: slideCount });
    } else if (index > slideCount) {
      this.setState({ currentIndex: 0 });
    } else {
      this.setState({ currentIndex: index });
    }
    if (event) {
      if (this._intervalId) {
        // user event, reset interval
        this.pause();
        this.play();
      }
    }
  },

  play: function play() {
    var _this2 = this;

    if (this._intervalId) {
      return;
    }
    this._intervalId = window.setInterval(function () {
      if (!_this2.state.hovering) {
        _this2.slideToIndex(_this2.state.currentIndex + 1);
      }
    }, this.props.slideInterval);
  },

  pause: function pause() {
    if (this._intervalId) {
      window.clearInterval(this._intervalId);
      this._intervalId = null;
    }
  },

  _wrapClick: function _wrapClick(func) {
    var _this3 = this;

    if (typeof func === 'function') {
      return function (event) {
        if (_this3._preventGhostClick === true) {
          return;
        }
        func(event);
      };
    }
  },

  _touchEnd: function _touchEnd() {
    var _this4 = this;

    this._preventGhostClick = true;
    this._preventGhostClickTimer = window.setTimeout(function () {
      _this4._preventGhostClick = false;
      _this4._preventGhostClickTimer = null;
    }, this._ghotClickDelay);
  },

  _setThumbnailsTranslateX: function _setThumbnailsTranslateX(x) {
    this.setState({ thumbnailsTranslateX: x });
  },

  _handleResize: function _handleResize() {
    this.setState({ containerWidth: this._imageGallery.offsetWidth });
  },

  _getScrollX: function _getScrollX(indexDifference) {
    if (this.props.disableThumbnailScroll) {
      return 0;
    }
    if (this._thumbnails) {
      if (this._thumbnails.scrollWidth <= this.state.containerWidth) {
        return 0;
      }

      var totalThumbnails = this._thumbnails.children.length;

      // total scroll-x required to see the last thumbnail
      var totalScrollX = this._thumbnails.scrollWidth - this.state.containerWidth;

      // scroll-x required per index change
      var perIndexScrollX = totalScrollX / (totalThumbnails - 1);

      return indexDifference * perIndexScrollX;
    }
  },

  _handleMouseOverThumbnails: function _handleMouseOverThumbnails(index) {
    var _this5 = this;

    if (this.props.slideOnThumbnailHover) {
      this.setState({ hovering: true });
      if (this._thumbnailTimer) {
        window.clearTimeout(this._thumbnailTimer);
        this._thumbnailTimer = null;
      }
      this._thumbnailTimer = window.setTimeout(function () {
        _this5.slideToIndex(index);
        _this5.pause();
      }, this._thumbnailDelay);
    }
  },

  _handleMouseLeaveThumbnails: function _handleMouseLeaveThumbnails() {
    if (this._thumbnailTimer) {
      window.clearTimeout(this._thumbnailTimer);
      this._thumbnailTimer = null;
      if (this.props.autoPlay == true) {
        this.play();
      }
    }
    this.setState({ hovering: false });
  },

  _handleKeyDown: function _handleKeyDown(e) {

    if (this.props.useKeyboardNavigation) {

      var currentIndex = this.state.currentIndex;

      switch (e.which) {
        case 39:
          {
            // Right arrow
            this.slideToIndex(currentIndex + 1, e);
            break;
          }
        case 37:
          {
            // Left arrow
            this.slideToIndex(currentIndex - 1, e);
            break;
          }
        case 27:
          {
            // Esc
            if (typeof this.props.onCloseClick === 'function') {
              this.props.onCloseClick(e);
            }
            break;
          }
        default:
          return;
      }
    }
  },

  _handleMouseOver: function _handleMouseOver() {
    this.setState({ hovering: true });
  },

  _handleMouseLeave: function _handleMouseLeave() {
    this.setState({ hovering: false });
  },

  _getAlignmentClassName: function _getAlignmentClassName(index) {
    var currentIndex = this.state.currentIndex;
    var alignment = '';
    switch (index) {
      case currentIndex - 1:
        alignment = ' left';
        break;
      case currentIndex:
        alignment = ' center';
        break;
      case currentIndex + 1:
        alignment = ' right';
        break;
    }

    if (this.props.items.length >= 3) {
      if (index === 0 && currentIndex === this.props.items.length - 1) {
        // set first slide as right slide if were sliding right from last slide
        alignment = ' right';
      } else if (index === this.props.items.length - 1 && currentIndex === 0) {
        // set last slide as left slide if were sliding left from first slide
        alignment = ' left';
      }
    }

    return alignment;
  },

  _getFileMeta: function _getFileMeta(currentIndex) {
    var filemeta = [];

    var item = undefined;

    for (var i = 0; i < this.props.items.length; i++) {
      if (i === currentIndex) {
        item = this.props.items[i];
      }
    }

    if (!item) return null;

    if (!this.props.showFileMeta) return null;

    if (item.filemeta) {
      var x = 0;
      for (var prop in item.filemeta) {
        filemeta.push(_react2['default'].createElement(
          'div',
          { key: x, className: prop + '-css image-filemeta-row-' + x },
          item.filemeta[prop]
        ));
        x++;
      }
    }

    return _react2['default'].createElement(
      'div',
      { className: 'filemetaContainer' },
      filemeta
    );
  },

  _handleImageLoad: function _handleImageLoad(event) {
    // slide images have an opacity of 0, onLoad the class 'loaded' is added
    // so that it transitions smoothly when navigating to non adjacent slides
    if (event.target.className.indexOf('loaded') === -1) {
      event.target.className += ' loaded';
    }
  },

  _handleImageError: function _handleImageError(event) {
    if (this.props.defaultImage && event.target.src.indexOf(this.props.defaultImage) === -1) {
      event.target.src = this.props.defaultImage;
    }
  },

  render: function render() {
    var _this6 = this;

    var currentIndex = this.state.currentIndex;
    var thumbnailStyle = {
      MozTransform: 'translate3d(' + this.state.thumbnailsTranslateX + 'px, 0, 0)',
      WebkitTransform: 'translate3d(' + this.state.thumbnailsTranslateX + 'px, 0, 0)',
      OTransform: 'translate3d(' + this.state.thumbnailsTranslateX + 'px, 0, 0)',
      msTransform: 'translate3d(' + this.state.thumbnailsTranslateX + 'px, 0, 0)',
      transform: 'translate3d(' + this.state.thumbnailsTranslateX + 'px, 0, 0)'
    };

    var slides = [];
    var thumbnails = [];
    var bullets = [];
    var actionBar = undefined;

    var gallerymenu = this.props.gallerymenu || [];
    var gallerymenudom = undefined;
    var gallerymenuitems = [];

    this.props.items.map(function (item, index) {
      var alignment = _this6._getAlignmentClassName(index);
      var originalClass = item.originalClass ? ' ' + item.originalClass : '';
      var thumbnailClass = item.thumbnailClass ? ' ' + item.thumbnailClass : '';

      var slide = _react2['default'].createElement(
        'div',
        {
          key: index,
          className: 'image-gallery-slide' + alignment + originalClass,
          onClick: _this6._wrapClick(_this6.props.onClick),
          onTouchStart: _this6.props.onClick,
          onTouchEnd: _this6._touchEnd },
        _react2['default'].createElement('img', {
          className: _this6.props.server ? 'loaded' : null,
          src: item.original,
          alt: item.originalAlt,
          onLoad: _this6._handleImageLoad,
          onError: _this6._handleImageError }),
        item.description
      );

      if (_this6.props.lazyLoad) {
        if (alignment) {
          slides.push(slide);
        }
      } else {
        slides.push(slide);
      }

      if (_this6.props.showThumbnails) {
        thumbnails.push(_react2['default'].createElement(
          'a',
          {
            onMouseOver: _this6._handleMouseOverThumbnails.bind(_this6, index),
            onMouseLeave: _this6._handleMouseLeaveThumbnails.bind(_this6, index),
            key: index,
            className: 'image-gallery-thumbnail' + (currentIndex === index ? ' active' : '') + thumbnailClass,

            onTouchStart: _this6.slideToIndex.bind(_this6, index),
            onTouchEnd: _this6._touchEnd,
            onClick: _this6._wrapClick(_this6.slideToIndex.bind(_this6, index)) },
          _react2['default'].createElement('img', {
            src: item.thumbnail,
            alt: item.thumbnailAlt,
            onError: _this6._handleImageError })
        ));
      }

      if (_this6.props.showBullets) {
        bullets.push(_react2['default'].createElement('li', {
          key: index,
          className: 'image-gallery-bullet ' + (currentIndex === index ? 'active' : ''),

          onTouchStart: _this6.slideToIndex.bind(_this6, index),
          onTouchEnd: _this6._touchEnd,
          onClick: _this6._wrapClick(_this6.slideToIndex.bind(_this6, index)) }));
      }
    });

    if (this.props.showCloseButton && typeof this.props.onCloseClick === 'function') {
      actionBar = _react2['default'].createElement(
        'div',
        { className: 'image-gallery-actionbar' },
        _react2['default'].createElement('div', { onClick: this.props.onCloseClick, className: 'image-gallery-closeButton' })
      );
    }

    if (gallerymenu) {
      gallerymenu.map(function (item, index) {
        gallerymenuitems.push(_react2['default'].createElement(
          'li',
          { key: index, className: 'gallerymenu-item-css' },
          _react2['default'].createElement(
            'a',
            { key: index, onClick: _this6._wrapClick(item.callback.bind(_this6, currentIndex)) },
            item.text
          )
        ));
      });
    }

    var swipePrev = this.slideToIndex.bind(this, currentIndex - 1);
    var swipeNext = this.slideToIndex.bind(this, currentIndex + 1);
    var itemsTotal = this.props.items.length;
    return _react2['default'].createElement(
      'section',
      { ref: function (i) {
          return _this6._imageGallery = i;
        }, className: 'image-gallery' },
      actionBar,
      _react2['default'].createElement(
        'div',
        {
          tabIndex: '1',
          onMouseOver: this._handleMouseOver,
          onMouseLeave: this._handleMouseLeave,
          ref: 'gallerycontent',
          className: 'image-gallery-content' },
        itemsTotal >= 2 ? [this.props.showNav && [_react2['default'].createElement('a', {
          key: 'leftNav',
          className: 'image-gallery-left-nav',
          onTouchStart: swipePrev,
          onTouchEnd: this._touchEnd,
          onClick: this._wrapClick(swipePrev) }), _react2['default'].createElement('a', {
          key: 'rightNav',
          className: 'image-gallery-right-nav',
          onTouchStart: swipeNext,
          onTouchEnd: this._touchEnd,
          onClick: this._wrapClick(swipeNext) })], _react2['default'].createElement(
          _reactSwipeable2['default'],
          {
            key: 'swipeable',
            onSwipedLeft: swipeNext,
            onSwipedRight: swipePrev },
          _react2['default'].createElement(
            'div',
            { className: 'image-gallery-slides' },
            slides
          )
        )] : _react2['default'].createElement(
          'div',
          { className: 'image-gallery-slides' },
          slides
        ),
        this._getFileMeta(currentIndex),
        gallerymenu && _react2['default'].createElement(
          'div',
          { className: 'image-gallery-menu' },
          _react2['default'].createElement(
            'ul',
            { className: 'image-gallery-menu-container' },
            gallerymenuitems
          )
        ),
        this.props.showBullets && _react2['default'].createElement(
          'div',
          { className: 'image-gallery-bullets' },
          _react2['default'].createElement(
            'ul',
            { className: 'image-gallery-bullets-container' },
            bullets
          )
        ),
        this.props.showIndex && _react2['default'].createElement(
          'div',
          { className: 'image-gallery-index' },
          _react2['default'].createElement(
            'span',
            { className: 'image-gallery-index-current' },
            this.state.currentIndex + 1
          ),
          _react2['default'].createElement(
            'span',
            { className: 'image-gallery-index-separator' },
            this.props.indexSeparator
          ),
          _react2['default'].createElement(
            'span',
            { className: 'image-gallery-index-total' },
            itemsTotal
          )
        )
      ),
      this.props.showThumbnails && _react2['default'].createElement(
        'div',
        { className: 'image-gallery-thumbnails' },
        _react2['default'].createElement(
          'div',
          {
            ref: function (t) {
              return _this6._thumbnails = t;
            },
            className: 'image-gallery-thumbnails-container',
            style: thumbnailStyle },
          thumbnails
        )
      )
    );
  }

});

exports['default'] = ImageGallery;
module.exports = exports['default'];